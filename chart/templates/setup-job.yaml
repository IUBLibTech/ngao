---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "app.setup.name" . }}
  labels:
    app: {{ template "app.name" . }}
    chart: {{ template "app.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    # These will cause the job to timeout and cause the release to fail
    # and then the only way out is to do a full uninstall (volumes included)
    # "helm.sh/hook": post-install
    # "helm.sh/hook-weight": "-5"
    # "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 4
  template:
    metadata:
      labels:
        app: {{ template "app.name" . }}
        release: {{ .Release.Name }}
    spec:
      restartPolicy: Never
      {{- if .Values.rails.imagePullSecrets }}
      imagePullSecrets:
        {{ toYaml .Values.rails.imagePullSecrets }}
      {{- end }}
      volumes:
        - name: shared
          persistentVolumeClaim:
            claimName: {{ template "app.rails-env.name" . }}-shared
      initContainers:
        - name: check-solr-ready
          image: {{ .Values.rails.image.repository }}:{{ .Values.rails.image.tag }}
          command: ["/bin/bash"]
          args:
            - "-l"
            - "-c"
            - "response=0 && until [ $response == 200 ]; do response=$(curl --write-out %{http_code} --silent --output /dev/null $(echo $SOLR_BASE_URL)/admin/collections?action=LIST); echo Response is $response; sleep 5; done;"
          envFrom:
            - configMapRef:
                name: {{ template "app.rails-env.name" . }}
      containers:
        - name: setup
          image: {{ .Values.rails.image.repository }}:{{ .Values.rails.image.tag }}
          volumeMounts:
            - mountPath: /home/app/webapp/public/assets
              name: shared
              subPath: assets
          command: ["/bin/bash"]
          args:
            - "-l"
            - "-c"
            - "(bundle check || bundle install) && bundle exec rails db:create db:migrate && ruby ./chart/bin/solr-setup.rb && bundle exec rake assets:precompile && bundle exec rails db:seed && exit 0"
          envFrom:
            - configMapRef:
                name: {{ template "app.rails-env.name" . }}
            - secretRef:
                name: {{ template "app.rails-env.name" . }}
